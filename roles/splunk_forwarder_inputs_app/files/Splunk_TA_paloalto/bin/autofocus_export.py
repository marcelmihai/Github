import splunk_ta_paloalto_declare

import os
import sys
import time
import datetime

import modinput_wrapper.base_modinput
from splunklib import modularinput as smi
import retrieveAutoFocusExport as input_module

'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file autofocus_export.py
'''
class ModInputautofocus_export(modinput_wrapper.base_modinput.SingleInstanceModInput):

    def __init__(self):
        super(ModInputautofocus_export, self).__init__("splunk_ta_paloalto", "autofocus_export")

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = smi.Scheme("autofocus_export")
        scheme.title = ("AutoFocus Export List")
        scheme.description = ("Retrieve export list from AutoFocus")
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = False
        scheme.use_single_instance = True

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))
        scheme.add_argument(smi.Argument("label", title="label",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=True))
        return scheme

    def get_app_name(self):
        return "Splunk_TA_paloalto"

    def validate_input(self, definition):
        """validate the input stanza"""
        """Implement your own validation logic to validate the input stanza configurations"""
        # This example accesses the modular input variable
        opt_labels = definition.parameters.get('label', None)
        pass

    def collect_events(self, inputs, ew):
        """write out the events"""
        input_module.collect_events(self, inputs, ew)

if __name__ == "__main__":
    exitcode = ModInputautofocus_export().run(sys.argv)
    sys.exit(exitcode)
